[
  {
    "objectID": "contents/multinomial_intro.html#introduction",
    "href": "contents/multinomial_intro.html#introduction",
    "title": "Introduction to Multinomial Models",
    "section": "Introduction",
    "text": "Introduction\nIn political science, we are often interested in knowing the how individuals choose between different options. For example, what is the probability that an individual will vote for a specific candidate in an election? If our individuals have more than two candidates from which to choose, we can take advantage of multinomial modelling.\nMultinomial logit and probit models are an extension of the binary latent variable models we discussed in the previous section. Rather than modelling the choice made between two options - success or failure, vote or not vote - we can efficiently model the choice between many different options, for example: strongly favour, weakly favour, weakly dislike, strongly dislike.\nUnlike previously, the choice between a multinomial logit model and a multinomial probit model is not trivial. This difference centres on the Independence of Irrelevant Alternatives (IIA) assumption. We will discuss this shortly."
  },
  {
    "objectID": "contents/multinomial_intro.html#multinomial-logit-regression",
    "href": "contents/multinomial_intro.html#multinomial-logit-regression",
    "title": "Introduction to Multinomial Models",
    "section": "Multinomial logit regression",
    "text": "Multinomial logit regression\n\nIndependence of Irrelevant Alternatives assumption\nMultinomial logit assumes that the relative probability of existing choices is not affected by changes to the choice set. For example, if you remove a choice from your model, that choice’s probability of success will be distributed evenly among the remaining choices. Their relative contribution to the probability of success remains the same. This is a very strong assumption.\nFor example, I am choosing between four candidates for the Democratic primary. The probability that I will vote for each is defined by my preferences for their policy platforms. They are as below:\n\\[\nPr(cand\\_1) = \\frac{1}{10}\n\\]\n\\[\nPr(cand\\_2) = \\frac{1}{2}\n\\]\n\\[\nPr(cand\\_3) = \\frac{3}{10}\n\\]\n\\[\nPr(cand\\_4) = \\frac{1}{10}\n\\]\nCandidate 3 drops out of the race. They were a rather centerist candidate among Democrats, so their supporters do not flow to one specific candidate among those left. I follow this general trend and the probability that I would vote for that candidate distributes itself eveningly among the remaining candidates. Each gets a third of Candidate 3’s probability: \\(\\frac{1}{10}\\). The new distribution of the probability that I will vote for the candidates is as follows:\n\\[\nPr(cand\\_1) = \\frac{1}{5}\n\\]\n\\[\nPr(cand\\_2) = \\frac{3}{5}\n\\]\n\\[\nPr(cand\\_4) = \\frac{1}{5}\n\\]\nBecause the probability of success depends on the candidate, I should use a multinomial logistic regression to model my preferences across these choices.\n\n\nThe model\nFormally, we define the probability of success for each choice as:\n\\[\nPr(y_i = m | x_i) = \\frac{e^{x_i\\beta(m)}}{\\sum^{J}_{j = 1}e^{x_i\\beta(j)}}\n\\]\nWhere \\(m\\) is the option you have set to the baseline and \\(j\\) is all other options."
  },
  {
    "objectID": "contents/multinomial_intro.html#multinomial-probit",
    "href": "contents/multinomial_intro.html#multinomial-probit",
    "title": "Introduction to Multinomial Models",
    "section": "Multinomial probit",
    "text": "Multinomial probit\nThe process for defining the probability of success for more than two options remains similar to the multinomial logistic regression except that the multinomial probit model allows the errors across choices to be correlated. This means that our assumption that adding or removing choices does not disturb the balance of probabilities of success between the remaining choices does not need to hold. This makes multinomial probit regression a better choice for exploring choice entry and exit.\n\nA more flexible model\nTo illustrate, let’s consider which type of transport people take to work in the morning. Suppose people can choose between riding a red bus, a train, or driving a car to work. The probabilities are:\n\\[\nPr(red bus) = \\frac{1}{6}\n\\]\n\\[\nPr(train) = \\frac{2}{6}\n\\]\n\\[\nPr(car) = \\frac{3}{6}\n\\]\nTherefore, the odds of taking a red bus to train are \\(\\frac{\\frac{1}{6}}{\\frac{2}{6}} = \\frac{1}{2}\\). Now, let’s add the option of taking a blue bus. Will people split evenly across the blue bus, red bus, train, or car? Unlikely: their transport decision is probably not influenced by the colour of their options. Rather, people will likely be split between the red and blue bus, with people who take the train or drive their car unaffected.\nTherefore, the probabilities change:\n\\[\nPr(red bus) = \\frac{1}{12}\n\\]\n\\[\nPr(blue bus) = \\frac{1}{12}\n\\]\n\\[\nPr(train) = \\frac{2}{6}\n\\]\n\\[\nPr(car) = \\frac{3}{6}\n\\]\nTherefore, the odds of taking a red bus to train are now \\(\\frac{\\frac{1}{12}}{\\frac{2}{6}} \\ne \\frac{1}{2}\\). This violates the IIA assumption. We should not, therefore, use multilevel logit to model this relationship."
  },
  {
    "objectID": "contents/binary_intro_binary.html",
    "href": "contents/binary_intro_binary.html",
    "title": "Introduction to Binary Response Modelling",
    "section": "",
    "text": "This section uses the following packages:\n\nlibrary(tidyverse)\nlibrary(gtsummary)"
  },
  {
    "objectID": "contents/binary_intro_binary.html#introduction",
    "href": "contents/binary_intro_binary.html#introduction",
    "title": "Introduction to Binary Response Modelling",
    "section": "Introduction",
    "text": "Introduction\nWe often want to better understand binary outcomes in political science.\nLet’s start with simulated data to illustrate the theory. Let’s create some data:\n\ndf <- tibble(x = runif(1000, 0, 10)) |> \n  mutate(y = if_else(x < 5, \n                     sample(0:1, 1000, replace = T, prob = c(0.95, 0.05)),\n                     sample(0:1, 1000, replace = T, prob = c(0.05, 0.95))))\n\nhead(df)\n\n# A tibble: 6 × 2\n       x     y\n   <dbl> <int>\n1 8.76       1\n2 8.37       1\n3 1.36       0\n4 0.0117     0\n5 5.31       1\n6 8.95       1\n\n\nNow, let’s plot the relationship between our binary dependent variable, y, and our independent variable of interest, x.\n\nggplot(df, aes(x = x, y = y)) + \n  geom_point(alpha = 0.5) + \n  theme_minimal()\n\n\n\n\nThere seems to be a pretty clear relationship between y and x (because we created the data that way). When x is less than 5, you are very likely (in fact 95 percent likely) to get a y of 0. But how do we formally measure this?\nWhen working with binary outcomes, we want to understand the probability that you will get an outcome for any given value of your independent variable(s). From there, you can make an informed guess as to the outcome for given values of \\(X\\). For example, where the predicted probability of success is greater than 50 percent, you can predict that \\(y = 1\\)."
  },
  {
    "objectID": "contents/binary_intro_binary.html#linear-probability-model",
    "href": "contents/binary_intro_binary.html#linear-probability-model",
    "title": "Introduction to Binary Response Modelling",
    "section": "Linear Probability Model",
    "text": "Linear Probability Model\nLet’s start off simple. Let’s draw a straight line between these two clusters and see what we get.\n\nggplot(df, aes(x = x, y = y)) + \n  geom_point(alpha = 0.5) + \n  geom_smooth(method = \"lm\", se = F) + \n  theme_minimal()\n\n\n\n\nThis is our usual linear model:\n\nm_lpr <- lm(y ~ x, data = df)\n\ntbl_regression(m_lpr, intercept = T)\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n-0.16\n-0.20, -0.13\n<0.001\n    x\n0.14\n0.13, 0.14\n<0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nOur estimation of \\(y_i\\) can (and often does) take on values other than 0 or 1. This is because we can interpret the coefficients of this model as differences in the probability of success (\\(y = 1\\)). We can see that increasing \\(x\\) by one unit increases the probability that \\(y = 1\\) by 13.7%.\n\nIssues with LPM\nWe run into difficulties using LPM for prediction. First, our model can predict probabilities of success less than 0 and greater than 1. Second, and relatedly, we lose information treating these discrete outcomes (0 or 1) as continuous.\nImportantly, our theory may suggest a non-linear relationship between changes in \\(x\\) and the probability of success in \\(y\\). If this is the case, we should not use a linear model for this relationship."
  },
  {
    "objectID": "contents/binary_intro_binary.html#latent-variable-approach",
    "href": "contents/binary_intro_binary.html#latent-variable-approach",
    "title": "Introduction to Binary Response Modelling",
    "section": "Latent Variable Approach",
    "text": "Latent Variable Approach\nWe can only observe one of two outcomes: \\(y = 0\\) (failure) or \\(y = 1\\) (success). The linear model provided above does not account for this very well. How can we improve this model? The latent variable approach assumes a continuous relationship exists between our observed outcome (\\(y_i\\)) and our independent variables (\\(x_i\\)). This continuous relationship is driven by an unobserved outcome: \\(z_i\\).\n\\[\nz_i = X_i\\beta + \\epsilon_i\n\\]\nThis set up is familiar to us. Critically, though, we need to understand the shape of that independent error term, \\(\\epsilon_i\\). This defines the shape of the continuous relationship that takes us from \\(y = 0\\) to \\(y = 1\\). We have two common options to pick from: logistic or probit.\n\nLogistic Regression\nThe inverse logistic function suits our needs well. First, it is bounded between outcomes of 0 and 1. Second, it allows for a varying impact of a change in \\(x\\) on \\(y\\).\nFormally, the inverse logistic function is:\n\\[\nPr(Y = 1 | X) = logit^{-1}(X) = \\frac{e^X}{1 + e^X}\n\\]\nLet’s look at the shape of the inverse logistic function:\n\ntibble(x = seq(-10, 10, by = 0.5)) |> \n  mutate(y = plogis(x)) |> \n  ggplot(aes(x = x, y = y)) + \n  geom_line() + \n  theme_minimal()\n\n\n\n\n\nThe function plogis() gives you the inverse log of a number. For example, plogis(1) returns 0.7310586.\n\n\nThe model\nLet’s fit a logistic regression line against our data:\n\nggplot(df, aes(x = x, y = y)) + \n  geom_point(alpha = 0.5) + \n  geom_smooth(method = \"glm\", se = F, method.args = list(family = binomial(link = \"logit\"))) + \n  theme_minimal()\n\n\n\n\nOur model maps the relationship between our outcome (\\(y\\)) and our independent variable (\\(x\\)). We can interpret it as mapping the probability that \\(y = 1\\) for a given value of \\(x\\), otherwise written as \\(Pr(y = 1|x)\\).\nWe can fit this model as such:\n\nm_lr <- glm(y ~ x, data = df, family = binomial(link = \"logit\"))\n\ntbl_regression(m_lr, intercept = T)\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      log(OR)1\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n-5.8\n-6.6, -5.1\n<0.001\n    x\n1.2\n1.0, 1.3\n<0.001\n  \n  \n  \n    \n      1 OR = Odds Ratio, CI = Confidence Interval\n    \n  \n\n\n\n\nWe will explore how to interpret these coefficients and uncertainty in the next section.\n\n\n\nProbit Regression\nAn alternative approach is probit regression. This model is also bounded between outcomes of 0 and 1 and allows for a varying impact of a change in \\(x\\) on \\(y\\). The only real difference between the logistic and probit regression models are the ways they model the error term, \\(\\epsilon_i\\), in our latent variable \\(z_i\\). Probit replaces the logistic distribution with the normal distribution.\nFormally, the probit model is:\n\\[\nPr(Y = 1|X) = \\Phi(X\\beta)\n\\]\nLet’s look at the shape of the probit function:\n\ntibble(x = seq(-10, 10, by = 0.5)) |> \n  mutate(y = pnorm(x)) |> \n  ggplot(aes(x = x, y = y)) + \n  geom_line() + \n  theme_minimal()\n\n\n\n\n\nThe function pnorm() gives you the corresponding value for the normal cumulative distribution function. For example, pnorm(1.96) returns 0.9750021 (think confidence intervals!).\n\n\nThe model\nLet’s fit a probit regression line against our data:\n\nggplot(df, aes(x = x, y = y)) + \n  geom_point(alpha = 0.5) + \n  geom_smooth(method = \"glm\", se = F, method.args = list(family = binomial(link = \"logit\"))) + \n  theme_minimal()\n\n\n\n\nQuickly, let’s compare this probit regression (in red) to our logistic regression (in blue):\n\n\n\n\n\nThey both fit very similar models; however, the logistic regression produces fatter tails.\nOur probit model maps the relationship between our outcome (\\(y\\)) and our independent variable (\\(x\\)). Like the logistic regression, we can interpret it as mapping the probability that \\(y = 1\\) for a given value of \\(x\\), otherwise written as \\(Pr(y = 1|x)\\).\nWe can fit this model as such:\n\nm_pr <- glm(y ~ x, data = df, family = binomial(link = \"probit\"))\n\ntbl_regression(m_pr, intercept = T)\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n-2.9\n-3.2, -2.6\n<0.001\n    x\n0.59\n0.53, 0.64\n<0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nWe will explore how to interpret these coefficients and uncertainty in the next section."
  },
  {
    "objectID": "contents/binary_substantive_effects.html",
    "href": "contents/binary_substantive_effects.html",
    "title": "Measuring Substantive Effects on Binary Outcomes",
    "section": "",
    "text": "This section uses the following packages:\n\nlibrary(tidyverse)\nlibrary(broom)\nlibrary(gtsummary)\nlibrary(skimr)\nlibrary(mvtnorm)\n\nWe will use the dataset we set up in the previous section:\n\n\n   vote close edu7cat       homeown\n1 Voted    10       6     Homeowner\n2 Voted    29       6     Homeowner\n3 Voted    28       4     Homeowner\n4 Voted     0       5     Homeowner\n5 Voted    25       7 Not homeowner\n6 Voted    25       5 Not homeowner"
  },
  {
    "objectID": "contents/binary_substantive_effects.html#introduction",
    "href": "contents/binary_substantive_effects.html#introduction",
    "title": "Measuring Substantive Effects on Binary Outcomes",
    "section": "Introduction",
    "text": "Introduction\nPreviously, we explored the effect of a given value of \\(x_i\\) on our expected probability. We are rarely interested in this effect in political science. Rather, we are interested in the effect of a meaningful change in \\(x_i\\) on our expected probability. For example, what is the effect of changing the date of voting registration from 20 days prior to election day to election day? This section will outline how we calculate this substantive effect for binary outcomes.\nFor non-linear models, we need to specify our values carefully. Unlike linear models, the effect of a one unit change in \\(x\\) on \\(y\\) is not constant. To illustrate, let’s look at the effect on the probability of success of moving from \\(x = 2\\) to \\(x = 3\\) compared to the effect of moving from \\(x = 4\\) to \\(x = 5\\):\n\n\n\n\n\nMoving from \\(x = 2\\) (highlighted in light blue) to \\(x = 3\\) (highlighted in dark blue) increases the probability of success by 0.062, from 0.033 to 0.095. Moving the same interval of one unit from \\(x = 4\\) (highlighted in pink) to \\(x = 5\\) (highlighted in red) increases the probability of success by 0.254, from 0.244 to 0.498. That’s a 4.114 times increase in the effect of a one unit change in \\(x\\).\nTherefore, to measure the effect of moving from one value of \\(x\\) to another in a non-linear model, we need to know which values of \\(x\\) we are moving between. This should be theoretically driven: what is an interesting interval for the phenomenon you are measuring?"
  },
  {
    "objectID": "contents/binary_substantive_effects.html#measuring-substantive-effects",
    "href": "contents/binary_substantive_effects.html#measuring-substantive-effects",
    "title": "Measuring Substantive Effects on Binary Outcomes",
    "section": "Measuring substantive effects",
    "text": "Measuring substantive effects\nHow do we actually measure the effect of a change from \\(x_{i1}\\) to \\(x_{i2}\\)? We predict the estimated probability of success at \\(x_{i1}\\) and at \\(x_{i2}\\) and subtract those probabilities from one another to get the difference. Simple, right? However, there are two factors that complicate this process. First, we need to deal with the other variables in our model: what values should they be held at while we change our variable of interest, \\(x_i\\)? Second, how do we measure uncertainty surrounding this estimated effect? We will deal with these challenges in turn.\n\nWhat to do with the other independent variables\nThere are two dominant approaches to solving this challenge: the average case approach and the observed value approach.\n\nAverage case approach\nThis approach sets all other values to their mean (for continuous variables) or mode (for discrete variables).\n\nFind the mean or mode for all independent variables other than your variable of interest.\nFind your predicted probability of success with your first value of \\(x_i\\), holding all other variables at their mean or mode.\nFind your predicted probability of success with your second value of \\(x_i\\), holding all other variables at their mean or mode.\nCalculate the difference between these predicted probabilities.\nDiscuss the substantive significance of this difference.\n\nTo illustrate, let’s explore the predicted effect of changing a state’s registration voting date from 20 days prior to election day (\\(close = 20\\)) to election day (\\(close = 0\\)).\nFirst, let’s fit a logistic regression as we did in the previous section:\n\nm1 <- glm(vote ~ close + edu7cat + homeown, data = voters, family = binomial(link = \"logit\"))\n\ntbl_regression(m1, intercept = T, exponentiate = T)\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      OR1\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n0.45\n0.11, 1.56\n0.2\n    Registration closing\n0.99\n0.98, 1.00\n0.2\n    Education level\n\n\n\n    1\n—\n—\n\n    2\n1.59\n0.43, 6.60\n0.5\n    3\n1.24\n0.35, 4.96\n0.7\n    4\n1.66\n0.48, 6.54\n0.4\n    5\n3.46\n1.00, 13.6\n0.055\n    6\n6.86\n1.95, 27.4\n0.003\n    7\n9.13\n2.49, 38.0\n0.001\n    Homeownership\n\n\n\n    Not homeowner\n—\n—\n\n    Homeowner\n2.28\n1.85, 2.83\n<0.001\n  \n  \n  \n    \n      1 OR = Odds Ratio, CI = Confidence Interval\n    \n  \n\n\n\n\nNow, we create a new dataset that contains the values for close we want to test and sets the other independent variables to their mean or mode values:\n\nnew_data <- tibble(\n  close = c(0, 20),\n  edu7cat = voters |> count(edu7cat) |> filter(n == max(n)) |> pull(edu7cat),\n  homeown = voters |> count(homeown) |> filter(n == max(n)) |> pull(homeown)\n)\n\nnew_data\n\n# A tibble: 2 × 3\n  close edu7cat homeown  \n  <dbl> <fct>   <fct>    \n1     0 4       Homeowner\n2    20 4       Homeowner\n\n\nNext, we calculate the predicted probability that an individual will vote, given these values for our independent variables:\n\nresult <- augment(m1, newdata = new_data, type.predict = \"response\")\nresult\n\n# A tibble: 2 × 4\n  close edu7cat homeown   .fitted\n  <dbl> <fct>   <fct>       <dbl>\n1     0 4       Homeowner   0.629\n2    20 4       Homeowner   0.601\n\n\nNext, we calculate the difference between these predicted probabilities, noting that the only thing that changed in our model is the value of close:\n\nresult <- mutate(result, diff = (.fitted - lead(.fitted)) * 100)\nresult\n\n# A tibble: 2 × 5\n  close edu7cat homeown   .fitted  diff\n  <dbl> <fct>   <fct>       <dbl> <dbl>\n1     0 4       Homeowner   0.629  2.77\n2    20 4       Homeowner   0.601 NA   \n\n\nWe expect that the probability that an individual will vote increases 2.77 percentage points when a state’s closing date for voter registration moves from 20 days prior to election day to election day. If increasing turnout by 2.77 percentage points would swing an election in a candidate’s favour, this is a substantively significant result.1\nHowever, we have a bit of a problem. Is this really a generalisable result? Haven’t we just estimated the effect of this change in registration day closure for a homeowner with an education level of 4? This is the problem with the average case approach: we are discarding an enormous amount of rich data from our sample which is potentially compromising the generalisability of our estimates. In fact, sometimes our average case isn’t even in our dataset, which means that we are making out-of-sample predictions.\n\n\nObserved value approach\nThe observed value approach addresses this issue. It sets all other independent variables to their observed values, only aggregating the estimated effect at the end.\n\nFind your predicted probability of success with your first value of \\(x_i\\), holding all other variables at their observed values. You will get the same number of predictions as you have observations.\nFind your predicted probability of success with your second value of \\(x_i\\), holding all other variables at their observed values.\nCalculate the average predicted probability for each of these values of \\(x_i\\).\nCalculate the difference between these averages.\nDiscuss the substantive significance of this difference.\n\nLet’s explore the same question as above to illustrate.\nFirst, find the predicted probability of an individual voting when \\(close = 20\\):\n\nresult_20 <- augment(m1, newdata = mutate(voters, close = 20), type.predict = \"response\")\nresult_20\n\n# A tibble: 2,188 × 5\n   vote         close edu7cat homeown       .fitted\n   <fct>        <dbl> <fct>   <fct>           <dbl>\n 1 Voted           20 6       Homeowner       0.861\n 2 Voted           20 6       Homeowner       0.861\n 3 Voted           20 4       Homeowner       0.601\n 4 Voted           20 5       Homeowner       0.758\n 5 Voted           20 7       Not homeowner   0.784\n 6 Voted           20 5       Not homeowner   0.579\n 7 Voted           20 7       Homeowner       0.892\n 8 Voted           20 6       Homeowner       0.861\n 9 Voted           20 2       Homeowner       0.590\n10 Did not vote    20 5       Homeowner       0.758\n# … with 2,178 more rows\n\n\nNext, find the predicted probability of an individual voting when \\(close = 0\\):\n\nresult_0 <- augment(m1, newdata = mutate(voters, close = 0), type.predict = \"response\")\nresult_0\n\n# A tibble: 2,188 × 5\n   vote         close edu7cat homeown       .fitted\n   <fct>        <dbl> <fct>   <fct>           <dbl>\n 1 Voted            0 6       Homeowner       0.875\n 2 Voted            0 6       Homeowner       0.875\n 3 Voted            0 4       Homeowner       0.629\n 4 Voted            0 5       Homeowner       0.779\n 5 Voted            0 7       Not homeowner   0.803\n 6 Voted            0 5       Not homeowner   0.607\n 7 Voted            0 7       Homeowner       0.903\n 8 Voted            0 6       Homeowner       0.875\n 9 Voted            0 2       Homeowner       0.618\n10 Did not vote     0 5       Homeowner       0.779\n# … with 2,178 more rows\n\n\nNext, calculate the average predicted probability for \\(close = 20\\) and \\(close = 0\\):\n\nresult <- result_0 |> \n  bind_rows(result_20) |> \n  group_by(close) |> \n  summarise(.fitted = mean(.fitted)) |> \n  mutate(diff = (.fitted - lead(.fitted)) * 100)\n\nresult\n\n# A tibble: 2 × 3\n  close .fitted  diff\n  <dbl>   <dbl> <dbl>\n1     0   0.688  2.28\n2    20   0.666 NA   \n\n\nWe expect that the probability that an individual will vote increases 2.28 percentage points when a state’s closing date for voter registration moves from 20 days prior to election day to election day. If this increase in turnout would swing an election in a candidate’s favour, this is a substantively significant result.2\n\n\nWhich approach should you use?\nYou should use the observed values approach. Hanmer and Kalkan (2013) demonstrate using simulated data that the observed values approach consistently produces estimates closer to the population’s true probability than the average case approach. This makes sense: you are using more data to produce your estimated effects.\n\n\n\nMeasuring uncertainty when calculating substantive effects\nWe calculated these estimates using a model that includes error. We need to understand how this uncertainty impacts our estimated substantive effects. How do we get confidence intervals around our estimated effects?\nFirst, we need to go back to the fundamentals of our logistic or probit regression models. Remember from the first section that the latent variable approach assumes there is some continuous process that gets us from \\(y = 0\\) to \\(y = 1\\) based on some set of independent variables \\(X\\). This latent variable, \\(z_i\\), is modelled as:\n\\[\nz_i = \\beta_0 + X_i\\beta_i + \\epsilon_i\n\\]\nIt contains an error term: \\(\\epsilon_i\\). What that error looks like depends on whether you use a logistic or probit regression, but they are very similar. That error term applies to both \\(X_i\\) and \\(\\beta_i\\). So, we need to generate a series of estimates for both the \\(X_i\\) and \\(\\beta_i\\) to generate our confidence intervals.\nImagine we are trying to estimate the relationship between some binary outcome \\(y\\) and some independent variables \\(x\\) and \\(z\\). We take a representative sample from our population and fit a model against that data. If we were to take a different representative sample from our population and fit the same model to that data, we will probably get slightly different estimates for our \\(\\beta\\)s. This is because of the random error inherent in observational modelling. The idea behind logistic and probit regression is that if we were to do this many, many, many times (say, take 1,000 different representative samples from our population and use that data to fit 1,000 models) we would get a set of \\(\\beta\\) estimates that follow a normal (if you’re using a probit model) or inverse logistic (if you’re using a logistic model) distribution. Your original estimated \\(\\beta\\) will be within this distribution.\nWe can use this assumption to generate our confidence intervals. We just need to simulate fitting these 1,000 different models.\n\nIt is critical that your sample is representative of your population. We are not simulating drawing 1,000 different samples. Rather, we are taking our one model fitted against our one sample and drawing estimates around those \\(\\beta\\)s.\n\n\nSimulate fitting 1,000 different models by drawing 1,000 different \\(\\beta_i\\) around your estimated \\(\\beta_i\\) following your (logistic or probit) model’s distribution.\nPredict the probability of success for \\(x_{i1}\\) and \\(x_{i2}\\) using these 1,000 different model estimates.\nCalculate the difference between those predictions.\nCalculate the lower and upper confidence intervals and the mean of those differences.\n\nLet’s illustrate this by looking at our question above.\n\nLogistic regression\nRecall our logistic regression model from above:\n\ntbl_regression(m1, intercept = T, exponentiate = T)\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      OR1\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n0.45\n0.11, 1.56\n0.2\n    Registration closing\n0.99\n0.98, 1.00\n0.2\n    Education level\n\n\n\n    1\n—\n—\n\n    2\n1.59\n0.43, 6.60\n0.5\n    3\n1.24\n0.35, 4.96\n0.7\n    4\n1.66\n0.48, 6.54\n0.4\n    5\n3.46\n1.00, 13.6\n0.055\n    6\n6.86\n1.95, 27.4\n0.003\n    7\n9.13\n2.49, 38.0\n0.001\n    Homeownership\n\n\n\n    Not homeowner\n—\n—\n\n    Homeowner\n2.28\n1.85, 2.83\n<0.001\n  \n  \n  \n    \n      1 OR = Odds Ratio, CI = Confidence Interval\n    \n  \n\n\n\n\nLet’s collect those coefficients using broom::tidy():\n\ncoefs <- tidy(m1) |> pull(estimate)\ncoefs\n\n[1] -0.80698206 -0.00585002  0.46146385  0.21142686  0.50831506  1.24130230\n[7]  1.92500744  2.21140696  0.82613712\n\n\nNext, simulate fitting 1,000 different models using these estimates as our center-point using mvtnorm::rmvnorm():\n\nTODO: Learn more about the sigma.\n\n\ncoefs_sim <- rmvnorm(n = 1000, mean = coefs, sigma = vcov(m1)) |> \n  as_tibble() |> \n  set_names(tidy(m1) |> mutate(term = paste0(term, \"_beta\")) |> pull(term))\n\nhead(coefs_sim)\n\n# A tibble: 6 × 9\n  (Intercept…¹ close_…² edu7c…³ edu7ca…⁴ edu7c…⁵ edu7c…⁶ edu7c…⁷ edu7c…⁸ homeo…⁹\n         <dbl>    <dbl>   <dbl>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1       0.400  -0.00770  -0.855 -0.935   -0.805   0.0680   0.858   0.496   0.844\n2      -0.635  -0.00132   0.343 -0.144    0.229   0.813    2.14    2.23    0.740\n3       0.0850 -0.00886  -0.455 -0.555   -0.304   0.385    1.13    1.02    0.839\n4      -0.615  -0.00252   0.108 -0.00585  0.0745  0.948    1.62    1.82    0.916\n5      -0.897  -0.00899   0.484  0.325    0.545   1.26     1.92    2.27    0.906\n6      -0.812  -0.00909   0.640  0.580    0.863   1.65     2.32    2.79    0.504\n# … with abbreviated variable names ¹​`(Intercept)_beta`, ²​close_beta,\n#   ³​edu7cat2_beta, ⁴​edu7cat3_beta, ⁵​edu7cat4_beta, ⁶​edu7cat5_beta,\n#   ⁷​edu7cat6_beta, ⁸​edu7cat7_beta, ⁹​homeownHomeowner_beta\n\n\nLet’s look at the distribution of these simulated \\(\\beta\\)s for one of our variables: close:\n\nggplot(coefs_sim, aes(x = close_beta)) + \n  geom_histogram() + \n  geom_vline(xintercept = tidy(m1) |> filter(term == \"close\") |> pull(estimate)) + \n  theme_minimal()\n\n\n\n\nAs expected, this draw follows the inverse logit distribution and centered around our estimated \\(\\beta_{close}\\) (highlighted by the black line).\nNext, we need to predict the probability that an individual will vote when \\(close = 20\\) and when \\(close = 0\\) using these 1,000 different model estimates. To do this, we need to convert our categorical variables into dummy variables so that we can fit the correct \\(\\beta\\)s to them:\n\ntrans_data <- voters |> \n  transmute(\n    edu7cat2 = if_else(edu7cat == 2, 1, 0),\n    edu7cat3 = if_else(edu7cat == 3, 1, 0),\n    edu7cat4 = if_else(edu7cat == 4, 1, 0),\n    edu7cat5 = if_else(edu7cat == 5, 1, 0),\n    edu7cat6 = if_else(edu7cat == 6, 1, 0),\n    edu7cat7 = if_else(edu7cat == 7, 1, 0),\n    homeown = as.numeric(homeown) - 1\n  )\n\nhead(trans_data)\n\n  edu7cat2 edu7cat3 edu7cat4 edu7cat5 edu7cat6 edu7cat7 homeown\n1        0        0        0        0        1        0       1\n2        0        0        0        0        1        0       1\n3        0        0        1        0        0        0       1\n4        0        0        0        1        0        0       1\n5        0        0        0        0        0        1       0\n6        0        0        0        1        0        0       0\n\n\nNow, we include our close variable, set to 0 and 20 for each of these 2,188 observations. We should get a dataset of length 4,376: one set of observations for \\(close = 20\\) and one set for \\(close = 0\\).\n\nnew_data <- trans_data |> \n  mutate(close = 0) |> \n  bind_rows(mutate(trans_data, close = 20)) |> \n  group_by(close) |> \n  mutate(id = row_number()) |> \n  ungroup()\n\nnrow(new_data)\n\n[1] 4376\n\n\nNext, we need to join our datasets together, so we can calculate our predicted probability for each observation for each simulated model coefficient. We should get a dataframe with a length of 2 x 1,000 x 2,188 (number of different variables of interest x number of models x number of observations).\n\nsim_data <- coefs_sim |> \n  mutate(sim_round = row_number()) |> \n  full_join(new_data, by = character())\n\nnrow(sim_data)\n\n[1] 4376000\n\n\nWe can now estimate our logistic regression model using the 1,000 different estimated \\(\\beta\\)s for all 2,188 different observations. You need to first fit the linear model, then find the inverse logit of those results using plogis().\n\nresults <- sim_data |> \n  mutate(\n    .fitted = `(Intercept)_beta` +\n      close_beta * close +\n      edu7cat2_beta * edu7cat2 +\n      edu7cat3_beta * edu7cat3 +\n      edu7cat4_beta * edu7cat4 +\n      edu7cat5_beta * edu7cat5 +\n      edu7cat6_beta * edu7cat6 +\n      edu7cat7_beta * edu7cat7 +\n      homeownHomeowner_beta * homeown,\n    .fitted = plogis(.fitted)\n  ) |> \n  arrange(sim_round, id, close)\n\nhead(results)\n\n# A tibble: 6 × 20\n  (Intercept)…¹ close_…² edu7c…³ edu7c…⁴ edu7c…⁵ edu7c…⁶ edu7c…⁷ edu7c…⁸ homeo…⁹\n          <dbl>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1         0.400 -0.00770  -0.855  -0.935  -0.805  0.0680   0.858   0.496   0.844\n2         0.400 -0.00770  -0.855  -0.935  -0.805  0.0680   0.858   0.496   0.844\n3         0.400 -0.00770  -0.855  -0.935  -0.805  0.0680   0.858   0.496   0.844\n4         0.400 -0.00770  -0.855  -0.935  -0.805  0.0680   0.858   0.496   0.844\n5         0.400 -0.00770  -0.855  -0.935  -0.805  0.0680   0.858   0.496   0.844\n6         0.400 -0.00770  -0.855  -0.935  -0.805  0.0680   0.858   0.496   0.844\n# … with 11 more variables: sim_round <int>, edu7cat2 <dbl>, edu7cat3 <dbl>,\n#   edu7cat4 <dbl>, edu7cat5 <dbl>, edu7cat6 <dbl>, edu7cat7 <dbl>,\n#   homeown <dbl>, close <dbl>, id <int>, .fitted <dbl>, and abbreviated\n#   variable names ¹​`(Intercept)_beta`, ²​close_beta, ³​edu7cat2_beta,\n#   ⁴​edu7cat3_beta, ⁵​edu7cat4_beta, ⁶​edu7cat5_beta, ⁷​edu7cat6_beta,\n#   ⁸​edu7cat7_beta, ⁹​homeownHomeowner_beta\n\n\nWe then calculate the difference between the predicted probabilities for each observation when \\(close = 0\\) and \\(close = 20\\):\n\nresults |>\n  group_by(sim_round, id) |> \n  mutate(diff = (.fitted - lead(.fitted)) * 100) |> \n  drop_na(diff) |> \n  ungroup() |> \n  summarise(`Lower bound` = quantile(diff, 0.025),\n            `Mean` = quantile(diff, 0.5),\n            `Upper bound` = quantile(diff, 0.975))\n\n# A tibble: 1 × 3\n  `Lower bound`  Mean `Upper bound`\n          <dbl> <dbl>         <dbl>\n1         -1.37  2.23          6.68\n\n\nBecause this confidence interval crosses through 0, we cannot reject the null hypothesis that this substantive effect is caused by random error.\n\n\nProbit regression\nFirst, let’s fit our probit model:\n\nm2 <- glm(vote ~ close + edu7cat + homeown, data = voters, family = binomial(link = \"probit\"))\n\ntbl_regression(m2, intercept = T)\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n-0.49\n-1.3, 0.28\n0.2\n    Registration closing\n0.00\n-0.01, 0.00\n0.2\n    Education level\n\n\n\n    1\n—\n—\n\n    2\n0.28\n-0.52, 1.1\n0.5\n    3\n0.13\n-0.64, 0.93\n0.7\n    4\n0.31\n-0.44, 1.1\n0.4\n    5\n0.76\n0.00, 1.5\n0.054\n    6\n1.2\n0.39, 1.9\n0.004\n    7\n1.3\n0.52, 2.1\n0.001\n    Homeownership\n\n\n\n    Not homeowner\n—\n—\n\n    Homeowner\n0.50\n0.37, 0.63\n<0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nLet’s collect those coefficients using broom::tidy():\n\ncoefs <- tidy(m2) |> pull(estimate)\ncoefs\n\n[1] -0.489578055 -0.003628296  0.283498003  0.128636563  0.314455793\n[6]  0.761436748  1.153567104  1.308027905  0.501008446\n\n\nNext, simulate fitting 1,000 different models using these estimates as our center-point using mvtnorm::rmvnorm():\n\ncoefs_sim <- rmvnorm(n = 1000, mean = coefs, sigma = vcov(m2)) |> \n  as_tibble() |> \n  set_names(tidy(m2) |> mutate(term = paste0(term, \"_beta\")) |> pull(term))\n\nhead(coefs_sim)\n\n# A tibble: 6 × 9\n  (Intercept)…¹ close_…² edu7c…³ edu7c…⁴ edu7c…⁵ edu7c…⁶ edu7c…⁷ edu7c…⁸ homeo…⁹\n          <dbl>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1        -0.321 -0.00312 -0.0200  0.0416  0.0837   0.586   0.996   0.947   0.502\n2        -1.02  -0.00387  0.835   0.643   0.812    1.18    1.66    1.75    0.547\n3        -0.220 -0.00578 -0.121  -0.146   0.0602   0.449   0.975   1.06    0.542\n4        -0.186 -0.00362  0.105  -0.359  -0.0284   0.497   0.918   1.16    0.480\n5        -0.601 -0.00357  0.381   0.141   0.263    0.804   1.07    1.30    0.744\n6        -0.145 -0.00417 -0.393   0.0154  0.0275   0.417   0.941   0.840   0.433\n# … with abbreviated variable names ¹​`(Intercept)_beta`, ²​close_beta,\n#   ³​edu7cat2_beta, ⁴​edu7cat3_beta, ⁵​edu7cat4_beta, ⁶​edu7cat5_beta,\n#   ⁷​edu7cat6_beta, ⁸​edu7cat7_beta, ⁹​homeownHomeowner_beta\n\n\nLet’s look at the distribution of these simulated \\(\\beta\\)s for one of our variables: close:\n\nggplot(coefs_sim, aes(x = close_beta)) + \n  geom_histogram() + \n  geom_vline(xintercept = tidy(m2) |> filter(term == \"close\") |> pull(estimate)) + \n  theme_minimal()\n\n\n\n\nAs expected, this draw is normally distributed and centered around our estimated \\(\\beta_{close}\\).\nNext, we need to predict the probability that an individual will vote when \\(close = 20\\) and when \\(close = 0\\) using these 1,000 different model estimates. To do this, we need to convert our categorical variables into dummy variables so that we can fit the correct \\(\\beta\\)s to them:\n\ntrans_data <- voters |> \n  transmute(\n    edu7cat2 = if_else(edu7cat == 2, 1, 0),\n    edu7cat3 = if_else(edu7cat == 3, 1, 0),\n    edu7cat4 = if_else(edu7cat == 4, 1, 0),\n    edu7cat5 = if_else(edu7cat == 5, 1, 0),\n    edu7cat6 = if_else(edu7cat == 6, 1, 0),\n    edu7cat7 = if_else(edu7cat == 7, 1, 0),\n    homeown = as.numeric(homeown) - 1\n  )\n\nhead(trans_data)\n\n  edu7cat2 edu7cat3 edu7cat4 edu7cat5 edu7cat6 edu7cat7 homeown\n1        0        0        0        0        1        0       1\n2        0        0        0        0        1        0       1\n3        0        0        1        0        0        0       1\n4        0        0        0        1        0        0       1\n5        0        0        0        0        0        1       0\n6        0        0        0        1        0        0       0\n\n\nNow, we include our close variable, set to 0 and 20 for each of these 2,188 observations. We should get a dataset of length 4,376: one set of observations for \\(close = 20\\) and one set for \\(close = 0\\).\n\nnew_data <- trans_data |> \n  mutate(close = 0) |> \n  bind_rows(mutate(trans_data, close = 20)) |> \n  group_by(close) |> \n  mutate(id = row_number()) |> \n  ungroup()\n\nnrow(new_data)\n\n[1] 4376\n\n\nNext, we need to join our datasets together, so we can calculate our predicted probability for each observation for each simulated model coefficients. We should get a dataframe with a length of 2 x 1,000 x 2,188 (number of different variables of interest x number of models x number of observations).\n\nsim_data <- coefs_sim |> \n  mutate(sim_round = row_number()) |> \n  full_join(new_data, by = character())\n\nnrow(sim_data)\n\n[1] 4376000\n\n\nWe can now estimate our probit model using the 1,000 different estimated \\(\\beta\\)s for all 2,188 different observations. You need to first fit the linear model, then find the probit of those results using pnorm().\n\nresults <- sim_data |> \n  mutate(\n    .fitted = `(Intercept)_beta` +\n      close_beta * close +\n      edu7cat2_beta * edu7cat2 +\n      edu7cat3_beta * edu7cat3 +\n      edu7cat4_beta * edu7cat4 +\n      edu7cat5_beta * edu7cat5 +\n      edu7cat6_beta * edu7cat6 +\n      edu7cat7_beta * edu7cat7 +\n      homeownHomeowner_beta * homeown,\n    .fitted = pnorm(.fitted)\n  ) |> \n  arrange(sim_round, id, close)\n\nhead(results)\n\n# A tibble: 6 × 20\n  (Intercept)…¹ close_…² edu7c…³ edu7c…⁴ edu7c…⁵ edu7c…⁶ edu7c…⁷ edu7c…⁸ homeo…⁹\n          <dbl>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1        -0.321 -0.00312 -0.0200  0.0416  0.0837   0.586   0.996   0.947   0.502\n2        -0.321 -0.00312 -0.0200  0.0416  0.0837   0.586   0.996   0.947   0.502\n3        -0.321 -0.00312 -0.0200  0.0416  0.0837   0.586   0.996   0.947   0.502\n4        -0.321 -0.00312 -0.0200  0.0416  0.0837   0.586   0.996   0.947   0.502\n5        -0.321 -0.00312 -0.0200  0.0416  0.0837   0.586   0.996   0.947   0.502\n6        -0.321 -0.00312 -0.0200  0.0416  0.0837   0.586   0.996   0.947   0.502\n# … with 11 more variables: sim_round <int>, edu7cat2 <dbl>, edu7cat3 <dbl>,\n#   edu7cat4 <dbl>, edu7cat5 <dbl>, edu7cat6 <dbl>, edu7cat7 <dbl>,\n#   homeown <dbl>, close <dbl>, id <int>, .fitted <dbl>, and abbreviated\n#   variable names ¹​`(Intercept)_beta`, ²​close_beta, ³​edu7cat2_beta,\n#   ⁴​edu7cat3_beta, ⁵​edu7cat4_beta, ⁶​edu7cat5_beta, ⁷​edu7cat6_beta,\n#   ⁸​edu7cat7_beta, ⁹​homeownHomeowner_beta\n\n\nWe then calculate the difference between the predicted probabilities for each observation when \\(close = 0\\) and \\(close = 20\\):\n\nresults |>\n  group_by(sim_round, id) |> \n  mutate(diff = (.fitted - lead(.fitted)) * 100) |> \n  drop_na(diff) |> \n  ungroup() |> \n  summarise(`Lower bound` = quantile(diff, 0.025),\n            `Mean` = quantile(diff, 0.5),\n            `Upper bound` = quantile(diff, 0.975))\n\n# A tibble: 1 × 3\n  `Lower bound`  Mean `Upper bound`\n          <dbl> <dbl>         <dbl>\n1         -1.71  2.26          6.49\n\n\nBecause this confidence interval crosses through 0, we cannot reject the null hypothesis that this substantive effect is caused by random error."
  },
  {
    "objectID": "contents/binary_marginal_effects.html",
    "href": "contents/binary_marginal_effects.html",
    "title": "Measuring Marginal Effects on Binary Outcomes",
    "section": "",
    "text": "This section uses the following packages:\n\nlibrary(tidyverse)\nlibrary(rio)\nlibrary(skimr)\nlibrary(sjPlot)\nlibrary(broom)\nlibrary(gtsummary)\nlibrary(janitor)\n\nLet’s explore marginal and substantive effects using real-world data. How is a person’s decision to vote influenced by the closing date of registration to vote in US elections? Suppose we hypothesize that the further from election day registration closes, the less likely an individual is to vote. We also believe that there are other socio-economic factors that influence a person’s decision to vote for which we need to control. These are their level of education, and whether they are a homeowner.\nLet’s explore our data. First, we need to load it in. I will use rio::import().\n\nvoters_raw <- import(\"/Users/harrietgoers/Documents/GVPT729A/class_sets/data/cps00for729a.dta\")\n\nNext, we need to clean this data up:\n\nvoters <- voters_raw |> \n  transmute(vote = factor(vote, levels = c(0, 1), labels = c(\"Did not vote\", \"Voted\")), \n            close, \n            edu7cat = factor(edu7cat), \n            homeown = factor(homeown, levels = c(0, 1), labels = c(\"Not homeowner\", \"Homeowner\"))) |> \n  labelled::set_variable_labels(vote = \"Voted\", close = \"Registration closing\", edu7cat = \"Education level\", homeown = \"Homeownership\") |> \n  drop_na()\n\nhead(voters)\n\n   vote close edu7cat       homeown\n1 Voted    10       6     Homeowner\n2 Voted    29       6     Homeowner\n3 Voted    28       4     Homeowner\n4 Voted     0       5     Homeowner\n5 Voted    25       7 Not homeowner\n6 Voted    25       5 Not homeowner\n\n\n\nIf your categorical variables are stored as numeric data in your dataset, your model will treat them as continuous numeric variables. It will not exclude a base category. This will cause significant problems with your model. Always convert categorical variables to factors.\n\nNow, let’s look at a summary of our data using skimr::skim():\n\nskim(voters)\n\n\nData summary\n\n\nName\nvoters\n\n\nNumber of rows\n2188\n\n\nNumber of columns\n4\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n3\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nvote\n0\n1\nFALSE\n2\nVot: 1450, Did: 738\n\n\nedu7cat\n0\n1\nFALSE\n7\n4: 724, 5: 623, 6: 380, 7: 186\n\n\nhomeown\n0\n1\nFALSE\n2\nHom: 1665, Not: 523\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nclose\n0\n1\n22.29\n9.87\n0\n15\n29\n30\n30\n▁▁▂▁▇\n\n\n\n\n\nOur dataset contains 2,188 observations and 4 variables. Each observation represents an individual. For each individual, we have information on: whether or not they voted (vote); the number of days before the election that voter registration closes in their state (close); their level of education, broken down into seven categories (edu7cat); and whether or not they own a home (homeown).\nNote that we have removed any observations with missing values."
  },
  {
    "objectID": "contents/binary_marginal_effects.html#introduction",
    "href": "contents/binary_marginal_effects.html#introduction",
    "title": "Measuring Marginal Effects on Binary Outcomes",
    "section": "Introduction",
    "text": "Introduction\nOur goal is to make inferences from the sample to the population about how changes in our independent variable of interest, \\(x\\), influences the probability of success in our outcome of interest, \\(y\\). We can calculate this effect for each known value of \\(x\\), or the marginal effect. We can also calculate this effect for a meaningful change in the value of \\(x\\), or the substantive effect. We will discuss this in the next section.\nThe marginal effect is the effect of a given \\(x_i\\) on \\(y_i\\). In linear models, this effect is constant. However, both logit and probit models are curved. Therefore, the effect of \\(x_i\\) on \\(y_i\\) depends on your \\(x_i\\). As demonstrated in the figure below, the steepest change for both the logit (blue) and probit (red) models occurs around the middle values of \\(x_i\\).\n\n\n\n\n\nLet’s take a look at the effect of setting the closing registration date 20 days prior to the election day. We will start with a logistic regression."
  },
  {
    "objectID": "contents/binary_marginal_effects.html#logistic-regression",
    "href": "contents/binary_marginal_effects.html#logistic-regression",
    "title": "Measuring Marginal Effects on Binary Outcomes",
    "section": "Logistic Regression",
    "text": "Logistic Regression\nFirst, let’s fit our model:\n\nm1 <- glm(vote ~ close + edu7cat + homeown, data = voters, family = binomial(link = \"logit\"))\n\ntbl_regression(m1, intercept = T)\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      log(OR)1\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n-0.81\n-2.2, 0.45\n0.2\n    Registration closing\n-0.01\n-0.02, 0.00\n0.2\n    Education level\n\n\n\n    1\n—\n—\n\n    2\n0.46\n-0.84, 1.9\n0.5\n    3\n0.21\n-1.0, 1.6\n0.7\n    4\n0.51\n-0.73, 1.9\n0.4\n    5\n1.2\n0.00, 2.6\n0.055\n    6\n1.9\n0.67, 3.3\n0.003\n    7\n2.2\n0.91, 3.6\n0.001\n    Homeownership\n\n\n\n    Not homeowner\n—\n—\n\n    Homeowner\n0.83\n0.61, 1.0\n<0.001\n  \n  \n  \n    \n      1 OR = Odds Ratio, CI = Confidence Interval\n    \n  \n\n\n\n\n\nInterpreting the coefficients\nThese coefficients are difficult to interpret because the model is non-linear. With linear regression, we can interpret the coefficient of \\(x_i\\) to be the effect of a one unit change in \\(x_i\\) on the expected value of \\(y\\). This effect is the same for every value of \\(x_i\\).\nWith non-linear logistic regression, we need to choose where we want to evaluate a change in \\(x_i\\) on \\(y\\). We also need to transform our coefficients to make them more interpretable. We will discuss that shortly.\nThe coefficients presented above are log odds ratios. We can interpret their statistical significance and their sign. For example, we know that our independent variable of interest, close, is not statistically significant (\\(p = 0.232\\)). We also know that its effect on an individual’s decision to vote is negative: as days before an election the date of voter registration closes increases, the likelihood that an individual will vote decreases. We also know that a one day increase in the number of days prior to election day registration closes in a state is associated with a negative difference of -0.01 in the logit probability of voting. What do we mean by logit probability? Good question: this is not a very familiar way of thinking about probabilities. Let’s transform this value into something more interpretable.\n\nPredicted probabilities\nWe can use the inverse logit function to discover the predicted probability that an individual will vote for a given set of predictors.\n\\[\nPr(Y = 1 | X) = \\frac{e^{X\\beta}}{1 + e^{X\\beta}}\n\\]\nHolding all other values at their modes (\\(edu7cat = 4\\) and \\(homeown = 1\\)), the probability that an individual will vote when \\(close = 20\\) is:\n\\[\nPr(Y = 1 | close = 20) = \\frac{e^{\\beta_0 - \\beta_{close} * 20 + \\beta_{edu7cat4} * 1 + \\beta_{homeown} * 1}}{1 + e^{\\beta_0 - \\beta_{close} * 20 + \\beta_{edu7cat4} * 1 + \\beta_{homeown} * 1}} = \\frac{e^{-0.81 - 0.01 * 20 + 0.51 + 0.83}}{1 + e^{-0.81 - 0.01 * 20 + 0.51 + 0.83}} = \\frac{e^{0.33}}{1 + e^{0.33}} = 0.582\n\\]\n\nRemember, edu7cat is a categorical variable. We need to convert this variable into a series of dummy variables.\n\nTherefore, a person with an education level 4 who owns a home and lives in a state in which registration closes 20 days prior to election day is 58.2 percent likely to vote.\n\n\nOdds ratios\nYou can also interpret the coefficient in terms of its odds ratio. If the probability of success of an outcome is \\(p\\) (calculated using the function above) and, therefore, the probability of failure is \\(1-p\\), the the odds of success is \\(\\frac{p}{1-p}\\). Now, dividing two odds by each other gives you their odds ratio. For example, if two outcomes have the odds \\(\\frac{p_1}{1-p_1}\\) and \\(\\frac{p_2}{1-p_2}\\), then these outcomes have an odds ratio of \\(\\frac{\\frac{p_1}{1-p_1}}{\\frac{p_2}{1-p_2}}\\).\nThis is particularly useful for comparing the probability of success and failure for a given value of \\(x_i\\). When the odds ratio is 1, the odds of success are the same as the odds of failure (\\(\\frac{0.5}{0.5} = 1\\)). When the odds ratio is greater than 1, the odds of success are greater than the odds of failure (for example, \\(\\frac{0.8}{0.2} = 4\\)).\nTo get the odds ratio from the coefficients presented above, we exponentiate them:\n\\[\ne^{X\\beta}\n\\]\n\nExponentiation is the opposite operation to log transformation. So, to get from the log odds ratio presented in the table above to the odds ratio, we simply need to get rid of the log (leaving the odds ratio).\n\nThe coefficient for homeown, \\(\\beta_{homeown}\\), is the log odds ratio between homeowners and non-homeowners. To get the odds ratio for homeowners, we exponentiate that log odds ratio:\n\\[\ne^{\\beta_{homeown}} = e^{0.83} = 2.29\n\\]\nThis means that a homeowner is 2.29 times more likely to vote than a non-homeowner (our reference category), holding all other variables a fixed values.\n\nTo get the exponential of a number in R, use exp().\n\nFor education level 5:\n\\[\ne^{\\beta_{edu7cat5}} = e^{1.2} = 3.32\n\\]\nThis means that a person with a level of education in category 5 is 3.32 times more likely to vote than someone with a level of education in category 1 (our reference category), holding all other variables a fixed values. You can calculate this for any education level. The interpretation should always be in reference to your reference category.\nFor close:\n\\[\ne^{\\beta_{close}} = e^{-0.01} = 0.99\n\\]\nHolding homeown and edu7cat at fixed values, we will see a 1 percentage point decrease (\\(1 - 0.99\\)) in the probability that an individual will vote for every one day increase in the days before an election registration closes.\n\nCalculating the odds ratio\nHappily, gtsummary::tbl_regression() can easily present these results for us:\n\ntbl_regression(m1, intercept = T, exponentiate = T)\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      OR1\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n0.45\n0.11, 1.56\n0.2\n    Registration closing\n0.99\n0.98, 1.00\n0.2\n    Education level\n\n\n\n    1\n—\n—\n\n    2\n1.59\n0.43, 6.60\n0.5\n    3\n1.24\n0.35, 4.96\n0.7\n    4\n1.66\n0.48, 6.54\n0.4\n    5\n3.46\n1.00, 13.6\n0.055\n    6\n6.86\n1.95, 27.4\n0.003\n    7\n9.13\n2.49, 38.0\n0.001\n    Homeownership\n\n\n\n    Not homeowner\n—\n—\n\n    Homeowner\n2.28\n1.85, 2.83\n<0.001\n  \n  \n  \n    \n      1 OR = Odds Ratio, CI = Confidence Interval\n    \n  \n\n\n\n\nWe can also get these results programmatically using broom::tidy():\n\ntidy(m1, exponentiate = T)\n\n# A tibble: 9 × 5\n  term             estimate std.error statistic  p.value\n  <chr>               <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)         0.446   0.655      -1.23  2.18e- 1\n2 close               0.994   0.00490    -1.19  2.32e- 1\n3 edu7cat2            1.59    0.679       0.679 4.97e- 1\n4 edu7cat3            1.24    0.658       0.321 7.48e- 1\n5 edu7cat4            1.66    0.645       0.788 4.31e- 1\n6 edu7cat5            3.46    0.647       1.92  5.50e- 2\n7 edu7cat6            6.86    0.656       2.94  3.33e- 3\n8 edu7cat7            9.13    0.679       3.26  1.13e- 3\n9 homeownHomeowner    2.28    0.108       7.62  2.55e-14\n\n\nFinally, we can visualise these results using sjPlot::plot_model():\n\nplot_model(m1, sort.est = T, show.values = T, value.offset = .3)\n\n\n\n\n\n\n\n\nInterpreting the intercept\nAs usual, the intercept should be interpreted as the expected value when all independent variables are set to 0.\n\\[\nPr(Y = 1 | X) = log(\\frac{p}{1 - p}) = -0.81\n\\]\nThis is simple to interpret in terms of the probability of success. Remember:\n\\[\nPr(Y = 1 | X) = \\frac{e^{X\\beta}}{1 + e^{X\\beta}}\n\\]\nTherefore, for our voter model:\n\\[\n\\frac{e^{\\beta_0}}{1 + e^{\\beta_0}} = \\frac{e^{-0.81}}{1 + e^{-0.81}} = \\frac{0.445}{1.445} = 0.308\n\\]\nThe probability that an individual in a state with election day registration, who has an education level of category 1, and who does not own a house is 0.308 or 30.8%."
  }
]